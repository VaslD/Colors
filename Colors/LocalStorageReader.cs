using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Colors.Core;

using YamlDotNet.RepresentationModel;

namespace Colors
{
    /// <summary>
    /// Reads a file generated by <see cref="LocalStorageWriter"/> and restores saved <see cref="Palette"/>s.
    /// </summary>
    public class LocalStorageReader : IPalettesProvider
    {
        private readonly StreamReader source;

        public LocalStorageReader(FileStream file)
        {
            source = new StreamReader(file, Encoding.UTF8);
        }

        /// <summary>
        /// Refer to <see cref="LocalStorageWriter.Serialize(Palette)"/> for serialization/deserialization logic.
        /// </summary>
        private Palette Deserialize(YamlNode root)
        {
            if (root.NodeType == YamlNodeType.Scalar && string.IsNullOrEmpty(((YamlScalarNode) root)?.Value)) return null;

            var name = string.Empty;
            YamlSequenceNode colorsNode;
            if (root is YamlMappingNode map)
            {
                var pair = map.Children.First();
                name = (pair.Key as YamlScalarNode)?.Value;
                colorsNode = (YamlSequenceNode) pair.Value;
            }
            else colorsNode = (YamlSequenceNode) root;

            var colors = new List<Color>(colorsNode.Children.Count);
            foreach (var color in colorsNode)
            {
                if (color is YamlScalarNode scalar) colors.Add(new Color(int.Parse(scalar.Value)));
                else
                {
                    var namedColor = ((YamlMappingNode) color).Children.First();
                    colors.Add(new Color(((YamlScalarNode) namedColor.Key).Value, int.Parse(((YamlScalarNode) namedColor.Value).Value)));
                }
            }

            return new Palette(name, colors);
        }

        public ValueTask<IReadOnlyList<Palette>> RetrievePalettesAsync()
        {
            var streamable = new YamlStream();
            streamable.Load(source);

            var palettes = new List<Palette>(streamable.Documents.Count);
            foreach (var document in streamable)
            {
                var palette = Deserialize(document.RootNode);
                if (palette != null) palettes.Add(palette);
            }
            return new ValueTask<IReadOnlyList<Palette>>(palettes.AsReadOnly());
        }
    }
}
